import plotly.graph_objects as go
import pandas as pd

# Dados de exemplo para DLTs baseadas em DAG
dag_dlt_data = {
    'DLT': ['IOTA (DAG)', 'Hashgraph', 'Tangle', 'DLT Recomendado (DAG)'],
    'Escalabilidade': [9, 8, 9, 9],  # Exemplo: IOTA (DAG) é o recomendado aqui
    'Segurança': [7, 8, 7, 7],
    'Eficiência Energética': [9, 9, 8, 9],
    'Descentralização': [8, 7, 8, 8],
    'Tempo de Confirmação': [8, 7, 7, 8]
}

# Dados de exemplo para Algoritmos de Consenso em DAG
dag_algorithms_data = {
    'Algoritmo': ['IOTA (Tangle)', 'SCP (Stellar)', 'PoA', 'Algoritmo Recomendado (DAG)'],
    'Escalabilidade': [9, 8, 6, 9],  # Exemplo: IOTA (Tangle) é o recomendado
    'Segurança': [7, 8, 7, 7],
    'Eficiência Energética': [9, 8, 7, 9],
    'Descentralização': [8, 6, 5, 8],
    'Tempo de Confirmação': [8, 7, 6, 8]
}

# Criação do DataFrame para DLTs e Algoritmos baseados em DAG
dag_dlt_df = pd.DataFrame(dag_dlt_data)
dag_algorithms_df = pd.DataFrame(dag_algorithms_data)

# Função para criar gráfico de radar para DLTs (DAG)
def plot_dag_dlt_radar():
    fig = go.Figure()

    # Adiciona as DLTs baseadas em DAG ao gráfico de radar
    for i in range(len(dag_dlt_df)):
        fig.add_trace(go.Scatterpolar(
            r=[dag_dlt_df['Escalabilidade'][i], dag_dlt_df['Segurança'][i], dag_dlt_df['Eficiência Energética'][i], 
               dag_dlt_df['Descentralização'][i], dag_dlt_df['Tempo de Confirmação'][i]],
            theta=['Escalabilidade', 'Segurança', 'Eficiência Energética', 'Descentralização', 'Tempo de Confirmação'],
            fill='toself',
            name=dag_dlt_df['DLT'][i]
        ))

    # Configurações do layout do gráfico
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 10]  # Intervalo de 0 a 10
            )),
        showlegend=True,
        title="Comparação das DLTs Baseadas em DAG com a Recomendação"
    )

    # Exibe o gráfico
    fig.show()

# Função para criar gráfico de radar para
