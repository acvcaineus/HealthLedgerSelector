import streamlit as st
import pandas as pd
import traceback
from datetime import datetime
from user_management import login, register, logout
from decision_logic import get_recommendation
from database import get_user_recommendations, save_recommendation
from metrics import (calcular_gini, calcular_entropia, calcular_profundidade_decisoria, 
                    calcular_pruning, calcular_confiabilidade_recomendacao)

def init_session_state():
    """Initialize all required session state variables with error handling"""
    try:
        if 'initialized' not in st.session_state:
            st.session_state.initialized = True
            st.session_state.authenticated = False
            st.session_state.username = None
            st.session_state.page = 'In√≠cio'
            st.session_state.answers = {}
            st.session_state.error = None
            st.session_state.loading = False
            st.session_state.recommendation = None
            st.session_state.current_phase = 1
            st.session_state.phase_complete = False
    except Exception as e:
        st.error(f"Error initializing session state: {str(e)}")
        st.session_state.error = str(e)

def show_home_page():
    """Display home page with framework explanation and reference table"""
    st.title("SeletorDLTSaude")
    st.write("Bem-vindo ao sistema de sele√ß√£o de DLT para sa√∫de.")
    
    # Enhanced header with more detailed explanation
    st.header("Objetivo do Framework")
    st.markdown('''
        O SeletorDLTSaude √© uma aplica√ß√£o interativa desenvolvida para ajudar profissionais 
        e pesquisadores a escolherem a melhor solu√ß√£o de Distributed Ledger Technology (DLT) 
        e o algoritmo de consenso mais adequado para projetos de sa√∫de.

        ### Como Funciona
        A aplica√ß√£o guia voc√™ atrav√©s de um processo estruturado em quatro fases:
        1. **Fase de Aplica√ß√£o**: 
           - Avalia requisitos de privacidade
           - Analisa necessidades de integra√ß√£o
           - Define controles de acesso
        
        2. **Fase de Consenso**: 
           - Determina requisitos de seguran√ßa
           - Avalia efici√™ncia do consenso
           - Define toler√¢ncia a falhas
        
        3. **Fase de Infraestrutura**: 
           - Considera escalabilidade
           - Analisa performance
           - Avalia requisitos t√©cnicos
        
        4. **Fase de Internet**: 
           - Define governan√ßa
           - Estabelece interoperabilidade
           - Determina acessibilidade
    ''')

    # Enhanced reference table with visual separation
    st.subheader("Tabela de Refer√™ncia de DLTs e Algoritmos")
    st.markdown("""
        <style>
        .highlight {
            background-color: #f0f2f6;
            padding: 20px;
            border-radius: 10px;
            margin: 10px 0;
        }
        </style>
    """, unsafe_allow_html=True)
    
    data = {
        'Grupo': [
            'Alta Seguran√ßa e Controle', 'Alta Seguran√ßa e Controle',
            'Alta Efici√™ncia Operacional', 'Alta Efici√™ncia Operacional',
            'Escalabilidade e Governan√ßa Flex√≠vel', 'Alta Escalabilidade em Redes IoT'
        ],
        'Tipo DLT': [
            'DLT Permissionada Privada', 'DLT P√∫blica Permissionless',
            'DLT Permissionada Simples', 'DLT H√≠brida',
            'DLT com Consenso Delegado', 'DLT P√∫blica'
        ],
        'Nome DLT': [
            'Hyperledger Fabric', 'Bitcoin', 'Quorum', 'Ethereum 2.0', 'EOS', 'IOTA'
        ],
        'Algoritmo de Consenso': [
            'PBFT', 'PoW', 'RAFT/PoA', 'PoS', 'DPoS', 'Tangle'
        ],
        'Principais Caracter√≠sticas': [
            'Alta seguran√ßa e resili√™ncia contra falhas bizantinas', 
            'Alta seguran√ßa e descentraliza√ß√£o total',
            'Simplicidade e efici√™ncia em redes locais',
            'Alta escalabilidade e efici√™ncia energ√©tica',
            'Governan√ßa flex√≠vel e alta performance',
            'Escalabilidade para IoT e dados em tempo real'
        ]
    }

    # Create enhanced table with styling
    df = pd.DataFrame(data)
    st.markdown('<div class="highlight">', unsafe_allow_html=True)
    st.table(df)
    st.markdown('</div>', unsafe_allow_html=True)

    # Enhanced start button with clear explanation
    st.markdown("### Iniciar Processo de Sele√ß√£o")
    st.info("üîç Ao clicar no bot√£o abaixo, voc√™ iniciar√° o processo guiado de sele√ß√£o de DLT.")
    
    if st.button("Iniciar Sele√ß√£o de DLT", type="primary"):
        st.session_state.page = 'Framework Proposto'
        st.session_state.answers = {}  # Reset answers
        st.session_state.current_phase = 1  # Reset phase
        st.session_state.recommendation = None  # Reset recommendation
        st.experimental_rerun()

def show_metrics():
    """Display enhanced metrics and recommendation results"""
    st.header("M√©tricas - Resultados da Recomenda√ß√£o")
    
    if 'recommendation' not in st.session_state or st.session_state.recommendation is None:
        st.warning("Por favor, complete o question√°rio primeiro para visualizar as m√©tricas.")
        if st.button("Ir para o Question√°rio"):
            st.session_state.page = 'Framework Proposto'
            st.experimental_rerun()
        return

    recommendation = st.session_state.recommendation
    
    # Enhanced metrics display with explanations
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üìä M√©tricas de Avalia√ß√£o")
        metrics_df = pd.DataFrame({
            'M√©trica': ['Seguran√ßa', 'Escalabilidade', 'Efici√™ncia Energ√©tica', 'Governan√ßa'],
            'Valor': [
                recommendation['evaluation_matrix'][recommendation['dlt']]['metrics']['security'],
                recommendation['evaluation_matrix'][recommendation['dlt']]['metrics']['scalability'],
                recommendation['evaluation_matrix'][recommendation['dlt']]['metrics']['energy_efficiency'],
                recommendation['evaluation_matrix'][recommendation['dlt']]['metrics']['governance']
            ],
            'Explica√ß√£o': [
                'N√≠vel de prote√ß√£o e controle de acesso',
                'Capacidade de crescimento e adapta√ß√£o',
                'Consumo e otimiza√ß√£o de recursos',
                'Flexibilidade e controle administrativo'
            ]
        })
        st.table(metrics_df)
        
        # Add academic validation score
        if 'academic_validation' in recommendation:
            st.subheader("üéì Valida√ß√£o Acad√™mica")
            academic_data = recommendation['academic_validation']
            st.markdown(f"""
                - **Score Acad√™mico**: {academic_data.get('score', 'N/A')}/5.0
                - **Cita√ß√µes**: {academic_data.get('citations', 'N/A')}
                - **Refer√™ncia**: {academic_data.get('reference', 'N/A')}
                - **Valida√ß√£o**: {academic_data.get('validation', 'N/A')}
            """)
    
    with col2:
        st.subheader("üéØ √çndices de Confiabilidade")
        confidence_value = recommendation.get('confidence_value', 0.0)
        st.metric(
            label="Confian√ßa da Recomenda√ß√£o",
            value=f"{confidence_value:.2%}",
            delta=f"{'Alta' if confidence_value > 0.7 else 'M√©dia'} Confiabilidade",
            help="Baseado na an√°lise das respostas e m√©tricas acad√™micas"
        )
        
        # Add explanation of metrics
        st.markdown("""
            ### üìù Interpreta√ß√£o das M√©tricas
            
            - **0-40%**: Confian√ßa Baixa
            - **41-70%**: Confian√ßa M√©dia
            - **71-100%**: Confian√ßa Alta
            
            A confiabilidade √© calculada considerando:
            1. Consist√™ncia das respostas
            2. Valida√ß√£o acad√™mica
            3. Casos de uso similares
        """)

def show_profile():
    """Display enhanced user profile and saved recommendations"""
    st.header(f"üë§ Perfil do Usu√°rio: {st.session_state.username}")
    st.subheader("üìã Recomenda√ß√µes Anteriores")
    
    recommendations = get_user_recommendations(st.session_state.username)
    if recommendations:
        for rec in recommendations:
            with st.expander(f"Recomenda√ß√£o de {rec['timestamp']}", expanded=False):
                st.markdown(f"""
                    ### üîç Detalhes da Recomenda√ß√£o
                    - **DLT Recomendada**: {rec['dlt']}
                    - **Algoritmo de Consenso**: {rec['consensus']}
                    - **Data**: {rec['timestamp']}
                    
                    #### üìä M√©tricas Principais
                    - Seguran√ßa
                    - Escalabilidade
                    - Efici√™ncia
                """)
                st.write("---")
    else:
        st.info("üì≠ Nenhuma recomenda√ß√£o salva.")

def main():
    """Main function with improved navigation and authentication"""
    init_session_state()

    # Handle authentication
    if not st.session_state.authenticated:
        tab1, tab2 = st.tabs(["Login", "Registrar"])
        with tab1:
            login()
        with tab2:
            register()
    else:
        # Enhanced navigation menu
        menu_options = ['In√≠cio', 'Framework Proposto', 'M√©tricas', 'Perfil', 'Logout']
        menu_option = st.sidebar.selectbox("Escolha uma op√ß√£o", menu_options)

        if menu_option == 'Logout':
            logout()
            st.experimental_rerun()
        else:
            st.session_state.page = menu_option

        # Display current page content with loading indicators
        if st.session_state.page == 'In√≠cio':
            show_home_page()
        elif st.session_state.page == 'Framework Proposto':
            from decision_tree import run_decision_tree
            with st.spinner('Carregando question√°rio...'):
                run_decision_tree()
        elif st.session_state.page == 'M√©tricas':
            show_metrics()
        elif st.session_state.page == 'Perfil':
            show_profile()

if __name__ == "__main__":
    main()
