import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
import networkx as nx
from pyvis.network import Network
import streamlit.components.v1 as components
from user_management import login, register, is_authenticated, logout
from database import get_user_recommendations, save_recommendation, save_feedback
from decision_logic import get_recommendation, compare_algorithms, select_final_algorithm, get_scenario_pros_cons
from dlt_data import scenarios, questions, dlt_classes, consensus_algorithms
from utils import init_session_state

def show_correlation_table():
    st.subheader("Tabela de Correla√ß√£o DLT, Grupo de Algoritmo e Algoritmo de Consenso")
    data = {
        'DLT': ['Hyperledger Fabric', 'Corda', 'Quorum', 'VeChain', 'IOTA', 'Ripple (XRP Ledger)', 'Stellar', 'Bitcoin', 'Ethereum (PoW)', 'Ethereum 2.0 (PoS)', 'Cardano', 'Algorand', 'Tezos', 'Polkadot', 'IOTA (Recomenda√ß√£o)'],
        'Tipo de DLT': ['DLT Permissionada Privada', 'DLT Permissionada Simples', 'DLT H√≠brida', 'DLT H√≠brida', 'DLT com Consenso Delegado', 'DLT com Consenso Delegado', 'DLT com Consenso Delegado', 'DLT P√∫blica', 'DLT P√∫blica', 'DLT P√∫blica Permissionless', 'DLT P√∫blica Permissionless', 'DLT P√∫blica Permissionless', 'DLT P√∫blica Permissionless', 'DLT P√∫blica Permissionless', 'DLT com Consenso Delegado'],
        'Grupo de Algoritmo': ['Alta Seguran√ßa e Controle dos dados sens√≠veis', 'Alta Seguran√ßa e Controle dos dados sens√≠veis', 'Escalabilidade e Governan√ßa Flex√≠vel', 'Alta Efici√™ncia Operacional em redes locais', 'Alta Escalabilidade em Redes IoT', 'Alta Efici√™ncia Operacional em redes locais', 'Alta Efici√™ncia Operacional em redes locais', 'Alta Seguran√ßa e Descentraliza√ß√£o de dados cr√≠ticos', 'Alta Seguran√ßa e Descentraliza√ß√£o de dados cr√≠ticos', 'Escalabilidade e Governan√ßa Flex√≠vel', 'Escalabilidade e Governan√ßa Flex√≠vel', 'Escalabilidade e Governan√ßa Flex√≠vel', 'Escalabilidade e Governan√ßa Flex√≠vel', 'Escalabilidade e Governan√ßa Flex√≠vel', 'Alta Escalabilidade em Redes IoT'],
        'Algoritmo de Consenso': ['RAFT/IBFT', 'RAFT', 'RAFT/IBFT', 'PoA', 'Tangle', 'Ripple Consensus Algorithm', 'SCP', 'PoW', 'PoW', 'PoS', 'Liquid PoS', 'Pure PoS', 'Liquid PoS', 'NPoS', 'Tangle'],
        'Principais Caracter√≠sticas do Algoritmo': [
            'Alta toler√¢ncia a falhas, consenso r√°pido em ambientes permissionados',
            'Consenso baseado em l√≠deres, adequado para redes privadas',
            'Flexibilidade de governan√ßa, consenso eficiente para redes h√≠bridas',
            'Alta efici√™ncia, baixa lat√™ncia, consenso delegado a validadores autorizados',
            'Escalabilidade alta, arquitetura sem blocos, adequada para IoT',
            'Consenso r√°pido, baixa lat√™ncia, baseado em validadores confi√°veis',
            'Consenso baseado em qu√≥rum, alta efici√™ncia, toler√¢ncia a falhas',
            'Seguran√ßa alta, descentraliza√ß√£o, consumo elevado de energia',
            'Seguran√ßa alta, descentraliza√ß√£o, escalabilidade limitada, alto custo',
            'Efici√™ncia energ√©tica, incentivo √† participa√ß√£o, redu√ß√£o da centraliza√ß√£o',
            'Alta escalabilidade, participa√ß√£o l√≠quida, foco em sustentabilidade',
            'R√°pido tempo de confirma√ß√£o, participa√ß√£o aberta, seguran√ßa elevada',
            'Consenso din√¢mico, alta adaptabilidade, foco em governan√ßa',
            'Consenso eficiente, interoperabilidade entre parachains, seguran√ßa robusta',
            'Ideal para alta escalabilidade e efici√™ncia em redes IoT, arquitetura leve'
        ]
    }
    df = pd.DataFrame(data)
    st.table(df)

def show_home_page():
    st.header("Bem-vindo ao SeletorDLTSaude")
    st.write("""
    O SeletorDLTSaude √© uma ferramenta interativa projetada para ajudar profissionais e pesquisadores 
    da √°rea de sa√∫de a escolher a melhor solu√ß√£o de Tecnologia de Ledger Distribu√≠do (DLT) e o algoritmo 
    de consenso mais adequado para seus projetos.
    """)
    show_correlation_table()
    if st.button("Iniciar Question√°rio"):
        st.session_state.page = "questionnaire"
        st.session_state.step = 0
        st.session_state.answers = {}
        st.experimental_rerun()

def show_questionnaire():
    st.header("Question√°rio de Sele√ß√£o de DLT")
    if 'step' not in st.session_state:
        st.session_state.step = 0
    if 'answers' not in st.session_state:
        st.session_state.answers = {}

    scenario = "Registros M√©dicos Eletr√¥nicos (EMR)"
    if st.session_state.step < len(questions[scenario]):
        current_question = questions[scenario][st.session_state.step]
        st.subheader(current_question['text'])
        st.write(f"Camada: {current_question['shermin_layer']}")
        st.write(f"Caracter√≠stica principal: {current_question['main_characteristic']}")
        answer = st.radio("Escolha uma op√ß√£o:", current_question['options'])

        if st.button("Pr√≥xima Pergunta"):
            st.session_state.answers[current_question['id']] = answer
            st.session_state.step += 1
            if st.session_state.step >= len(questions[scenario]):
                st.session_state.page = "weights"
            st.experimental_rerun()
    else:
        st.session_state.page = "weights"
        st.experimental_rerun()

def show_weights():
    st.header("Definir Pesos das Caracter√≠sticas")
    st.write("Atribua um peso de 1 a 5 para cada caracter√≠stica, onde 1 √© menos importante e 5 √© mais importante.")
    
    weights = {}
    weights["seguran√ßa"] = st.slider("Seguran√ßa", 1, 5, 3)
    weights["escalabilidade"] = st.slider("Escalabilidade", 1, 5, 3)
    weights["efici√™ncia energ√©tica"] = st.slider("Efici√™ncia Energ√©tica", 1, 5, 3)
    weights["governan√ßa"] = st.slider("Governan√ßa", 1, 5, 3)
    weights["descentraliza√ß√£o"] = st.slider("Descentraliza√ß√£o", 1, 5, 3)

    if st.button("Gerar Recomenda√ß√£o"):
        st.session_state.weights = weights
        st.session_state.page = "recommendation"
        st.experimental_rerun()

def show_recommendation():
    st.header("Recomenda√ß√£o de DLT e Algoritmo de Consenso")
    
    if 'recommendation' not in st.session_state:
        recommendation = get_recommendation(st.session_state.answers, st.session_state.weights)
        st.session_state.recommendation = recommendation
    else:
        recommendation = st.session_state.recommendation

    st.subheader("DLT Recomendada:")
    st.write(recommendation["dlt"])
    st.subheader("Grupo de Algoritmo de Consenso Recomendado:")
    st.write(recommendation["consensus_group"])

    st.subheader("Compara√ß√£o de Algoritmos de Consenso:")
    comparison_data = compare_algorithms(recommendation["consensus_group"])
    df = pd.DataFrame(comparison_data)
    st.table(df)

    st.subheader("Selecione as Prioridades para o Algoritmo Final:")
    priorities = {}
    priorities["Seguran√ßa"] = st.slider("Seguran√ßa", 1, 5, 3)
    priorities["Escalabilidade"] = st.slider("Escalabilidade", 1, 5, 3)
    priorities["Efici√™ncia Energ√©tica"] = st.slider("Efici√™ncia Energ√©tica", 1, 5, 3)
    priorities["Governan√ßa"] = st.slider("Governan√ßa", 1, 5, 3)

    if st.button("Selecionar Algoritmo Final"):
        final_algorithm = select_final_algorithm(recommendation["consensus_group"], priorities)
        st.subheader("Algoritmo de Consenso Final Recomendado:")
        st.write(final_algorithm)

        pros_cons = get_scenario_pros_cons(recommendation["dlt"], final_algorithm)
        if pros_cons:
            st.subheader("Cen√°rios Aplic√°veis:")
            for scenario, details in pros_cons.items():
                st.write(f"**{scenario}**")
                st.write("Pros:")
                for pro in details["pros"]:
                    st.write(f"- {pro}")
                st.write("Cons:")
                for con in details["cons"]:
                    st.write(f"- {con}")
                st.write(f"Aplicabilidade do Algoritmo: {details['algorithm_applicability']}")

def show_decision_tree():
    st.header("√Årvore de Decis√£o")
    # Implementa√ß√£o futura da √°rvore de decis√£o

def show_framework_comparison():
    st.header("Compara√ß√£o de Frameworks")
    # Implementa√ß√£o futura da compara√ß√£o de frameworks

def main():
    init_session_state()
    st.set_page_config(page_title="SeletorDLTSaude", page_icon="üè•", layout="wide")

    if not is_authenticated():
        st.title("SeletorDLTSaude - Login")
        tab1, tab2 = st.tabs(["Login", "Registrar"])
        with tab1:
            login()
        with tab2:
            register()
    else:
        st.sidebar.title("Menu")
        menu_option = st.sidebar.selectbox("Escolha uma op√ß√£o", ["In√≠cio", "Question√°rio", "Recomenda√ß√µes", "√Årvore de Decis√£o", "Compara√ß√£o de Frameworks", "Logout"])

        if menu_option == "In√≠cio":
            show_home_page()
        elif menu_option == "Question√°rio" or st.session_state.get('page') == "questionnaire":
            show_questionnaire()
        elif menu_option == "Recomenda√ß√µes" or st.session_state.page == "weights":
            show_weights()
        elif st.session_state.page == "recommendation":
            show_recommendation()
        elif menu_option == "√Årvore de Decis√£o":
            show_decision_tree()
        elif menu_option == "Compara√ß√£o de Frameworks":
            show_framework_comparison()
        elif menu_option == "Logout":
            logout()

if __name__ == "__main__":
    main()
