import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from user_management import login, register, is_authenticated, logout
from decision_tree import run_decision_tree
from decision_logic import get_recommendation, compare_algorithms, consensus_algorithms
from database import get_user_recommendations
from metrics import (calcular_gini, calcular_entropia, calcular_profundidade_decisoria, 
                    calcular_pruning, calcular_confiabilidade_recomendacao)
import traceback

def init_session_state():
    """Initialize all required session state variables with error handling"""
    try:
        if 'initialized' not in st.session_state:
            st.session_state.update({
                'initialized': True,
                'authenticated': False,
                'username': None,
                'page': 'In√≠cio',
                'answers': {},
                'error': None,
                'loading': False,
                'recommendation': None
            })
    except Exception as e:
        st.error(f"Error initializing session state: {str(e)}")
        st.session_state.error = str(e)

def reset_session_state():
    """Reset session state on errors"""
    try:
        st.session_state.update({
            'answers': {},
            'error': None,
            'loading': False,
            'recommendation': None
        })
    except Exception as e:
        st.error(f"Error resetting session state: {str(e)}")

def show_home_page():
    """Display home page with framework explanation and reference table"""
    st.title("SeletorDLTSaude")
    st.write("Bem-vindo ao sistema de sele√ß√£o de DLT para sa√∫de.")
    st.header("Objetivo do Framework")
    st.markdown('''
        O SeletorDLTSaude √© uma aplica√ß√£o interativa desenvolvida para ajudar profissionais 
        e pesquisadores a escolherem a melhor solu√ß√£o de Distributed Ledger Technology (DLT) 
        e o algoritmo de consenso mais adequado para projetos de sa√∫de.

        A aplica√ß√£o guia o usu√°rio atrav√©s de um processo estruturado em quatro fases:
        - **Fase de Aplica√ß√£o**: Avalia requisitos de privacidade e integra√ß√£o
        - **Fase de Consenso**: Analisa necessidades de seguran√ßa e efici√™ncia
        - **Fase de Infraestrutura**: Considera escalabilidade e performance
        - **Fase de Internet**: Avalia governan√ßa e interoperabilidade
    ''')

    data = {
        'Grupo': ['Alta Seguran√ßa e Controle', 'Alta Seguran√ßa e Descentraliza√ß√£o', 
                 'Alta Seguran√ßa e Descentraliza√ß√£o', 'Alta Efici√™ncia Operacional', 
                 'Alta Efici√™ncia Operacional', 'Alta Efici√™ncia Operacional', 
                 'Escalabilidade e Governan√ßa Flex√≠vel', 'Escalabilidade e Governan√ßa Flex√≠vel', 
                 'Alta Escalabilidade em Redes IoT'],
        'Tipo DLT': ['DLT Permissionada Privada', 'DLT P√∫blica Permissionless', 
                     'DLT P√∫blica Permissionless', 'DLT Permissionada Simples', 
                     'DLT Permissionada Simples', 'DLT Permissionada Simples', 
                     'DLT H√≠brida', 'DLT com Consenso Delegado', 'DLT P√∫blica'],
        'Nome DLT': ['Hyperledger Fabric', 'Bitcoin', 'Ethereum', 'Quorum', 
                     'Quorum', 'VeChain', 'Ethereum 2.0', 'EOS', 'IOTA'],
        'Algoritmo de Consenso': ['PBFT', 'PoW', 'PoS (em transi√ß√£o)', 'RAFT', 
                                 'PoA', 'PoA', 'PoS', 'DPoS', 'Tangle']
    }

    df = pd.DataFrame(data)
    st.table(df)

    if st.button("Iniciar Sele√ß√£o de DLT", type="primary"):
        st.session_state.page = 'Framework Proposto'
        st.rerun()

def show_metrics():
    st.header("M√©tricas T√©cnicas do Processo de Decis√£o")
    try:
        if 'recommendation' in st.session_state:
            with st.spinner('Carregando m√©tricas...'):
                rec = st.session_state.recommendation
                if 'evaluation_matrix' in rec:
                    classes = {k: v['score'] for k, v in rec['evaluation_matrix'].items()}
                    gini = calcular_gini(classes)
                    entropy = calcular_entropia(classes)

                    st.subheader("1. √çndice de Gini")
                    with st.expander("Ver Explica√ß√£o do √çndice de Gini"):
                        st.latex(r'''Gini = 1 - \sum_{i=1}^{n} p_i^2''')
                        st.markdown("""
                            O √çndice de Gini mede a dispers√£o das recomenda√ß√µes entre as diferentes DLTs.
                            - Valor pr√≥ximo a 0: Uma DLT claramente se destaca
                            - Valor pr√≥ximo a 1: V√°rias DLTs t√™m pontua√ß√µes similares
                        """)

                    st.subheader("2. Entropia da Decis√£o")
                    with st.expander("Ver Explica√ß√£o da Entropia"):
                        st.latex(r'''Entropia = -\sum_{i=1}^{n} p_i \log_2(p_i)''')
                        st.markdown("""
                            A Entropia mede a incerteza na classifica√ß√£o das DLTs.
                            - Valor baixo: Alta certeza na recomenda√ß√£o
                            - Valor alto: Maior incerteza na escolha
                        """)

                    col1, col2 = st.columns(2)
                    with col1:
                        st.metric("√çndice de Gini", f"{gini:.2f}")
                    with col2:
                        st.metric("Entropia", f"{entropy:.2f}")

                    st.subheader("3. Matriz de Avalia√ß√£o")
                    matrix_data = []
                    for dlt, data in rec['evaluation_matrix'].items():
                        row = [dlt]
                        for metric in ['security', 'scalability', 'energy_efficiency', 'governance']:
                            row.append(float(data['metrics'][metric]))
                        matrix_data.append(row)

                    df = pd.DataFrame(matrix_data, 
                                    columns=['DLT', 'Seguran√ßa', 'Escalabilidade', 
                                            'Efici√™ncia Energ√©tica', 'Governan√ßa'])
                    st.table(df)

                    st.subheader("4. Visualiza√ß√£o das M√©tricas")
                    fig = go.Figure()
                    for dlt in df['DLT']:
                        values = df[df['DLT'] == dlt].iloc[0, 1:].values.tolist()
                        values.append(values[0])  # Close the polygon
                        fig.add_trace(go.Scatterpolar(
                            r=values,
                            theta=['Seguran√ßa', 'Escalabilidade', 'Efici√™ncia Energ√©tica', 
                                  'Governan√ßa', 'Seguran√ßa'],
                            name=dlt,
                            fill='toself'
                        ))

                    fig.update_layout(
                        polar=dict(radialaxis=dict(visible=True, range=[0, 5])),
                        showlegend=True,
                        title="Compara√ß√£o de M√©tricas entre DLTs"
                    )
                    st.plotly_chart(fig)

        else:
            st.info("Complete o processo de sele√ß√£o para ver as m√©tricas.")

    except Exception as e:
        st.error(f"Erro ao exibir m√©tricas: {str(e)}")
        st.code(traceback.format_exc())

def main():
    st.set_page_config(page_title="SeletorDLTSaude", page_icon="üè•", layout="wide")
    init_session_state()

    if not is_authenticated():
        st.title("SeletorDLTSaude - Login")
        tab1, tab2 = st.tabs(["Login", "Registrar"])
        with tab1:
            login()
        with tab2:
            register()
    else:
        with st.sidebar:
            st.title("Menu")
            menu_options = ['In√≠cio', 'Framework Proposto', 'M√©tricas']
            menu_option = st.selectbox(
                "Escolha uma op√ß√£o",
                menu_options,
                index=menu_options.index(st.session_state.page) if st.session_state.page in menu_options else 0
            )
            st.session_state.page = menu_option

            if st.button("Logout"):
                logout()

        if menu_option == 'In√≠cio':
            show_home_page()
        elif menu_option == 'Framework Proposto':
            run_decision_tree()
        elif menu_option == 'M√©tricas':
            show_metrics()

if __name__ == "__main__":
    main()
