import streamlit as st
from user_management import login, register, is_authenticated, logout
from utils import init_session_state
from decision_tree import run_decision_tree
from decision_logic import get_recommendation, compare_algorithms, select_final_algorithm
import pandas as pd

def show_home_page():
    st.title("SeletorDLTSaude")
    st.write("Bem-vindo ao SeletorDLTSaude, um sistema de recomenda√ß√£o de tecnologias de ledger distribu√≠do (DLT) para aplica√ß√µes em sa√∫de.")
    
    if st.button("Iniciar Question√°rio"):
        st.session_state.page = "√Årvore de Decis√£o"
        st.rerun()

def show_questionnaire():
    st.header("Question√°rio de Sele√ß√£o de DLT")
    if 'step' not in st.session_state:
        st.session_state.step = 0
    if 'answers' not in st.session_state:
        st.session_state.answers = {}

    scenario = "Registros M√©dicos Eletr√¥nicos (EMR)"
    if st.session_state.step < len(questions[scenario]):
        current_question = questions[scenario][st.session_state.step]
        st.subheader(current_question['text'])
        st.write(f"Camada: {current_question['shermin_layer']}")
        st.write(f"Caracter√≠stica principal: {current_question['main_characteristic']}")
        answer = st.radio("Escolha uma op√ß√£o:", current_question['options'])

        if st.button("Pr√≥xima Pergunta"):
            st.session_state.answers[current_question['id']] = answer
            st.session_state.step += 1
            if st.session_state.step >= len(questions[scenario]):
                st.session_state.page = "Recomenda√ß√µes"
            st.rerun()
    else:
        st.session_state.page = "Recomenda√ß√µes"
        st.rerun()

def show_weights():
    st.header("Definir Pesos das Caracter√≠sticas")
    st.write("Atribua um peso de 1 a 5 para cada caracter√≠stica, onde 1 √© menos importante e 5 √© mais importante.")

    weights = {}
    weights["security"] = st.slider("Seguran√ßa", 1, 5, 3)
    weights["scalability"] = st.slider("Escalabilidade", 1, 5, 3)
    weights["energy_efficiency"] = st.slider("Efici√™ncia Energ√©tica", 1, 5, 3)
    weights["governance"] = st.slider("Governan√ßa", 1, 5, 3)
    weights["decentralization"] = st.slider("Descentraliza√ß√£o", 1, 5, 3)

    st.session_state.weights = weights
    st.session_state.page = "recommendation"
    st.rerun()

def show_recommendation():
    st.header("Recomenda√ß√£o de DLT e Algoritmo de Consenso")

    if 'weights' not in st.session_state or not st.session_state.weights:
        st.warning('Por favor, defina os pesos das caracter√≠sticas primeiro.')
        show_weights()
        return

    if 'recommendation' not in st.session_state and 'weights' in st.session_state and st.session_state.weights:
        if st.button('Gerar Recomenda√ß√£o'):
            recommendation = get_recommendation(st.session_state.answers, st.session_state.weights)
            st.session_state.recommendation = recommendation
            st.rerun()
    else:
        recommendation = st.session_state.recommendation

        st.subheader("DLT Recomendada:")
        st.write(recommendation["dlt"])
        st.subheader("Grupo de Algoritmo de Consenso Recomendado:")
        st.write(recommendation["consensus_group"])
        st.subheader("Algoritmos Recomendados:")
        st.write(", ".join(recommendation["algorithms"]))

        st.subheader("Compara√ß√£o de Algoritmos de Consenso:")
        comparison_data = compare_algorithms(recommendation["consensus_group"])
        df = pd.DataFrame(comparison_data)
        st.table(df)

        st.subheader("Selecione as Prioridades para o Algoritmo Final:")
        priorities = {}
        priorities["Seguran√ßa"] = st.slider("Seguran√ßa", 1, 5, 3)
        priorities["Escalabilidade"] = st.slider("Escalabilidade", 1, 5, 3)
        priorities["Efici√™ncia Energ√©tica"] = st.slider("Efici√™ncia Energ√©tica", 1, 5, 3)
        priorities["Governan√ßa"] = st.slider("Governan√ßa", 1, 5, 3)

        if st.button("Selecionar Algoritmo Final"):
            final_algorithm = select_final_algorithm(recommendation["consensus_group"], priorities)
            st.subheader("Algoritmo de Consenso Final Recomendado:")
            st.write(final_algorithm)

def main():
    init_session_state()
    st.set_page_config(page_title="SeletorDLTSaude", page_icon="üè•", layout="wide")

    if not is_authenticated():
        st.title("SeletorDLTSaude - Login")
        tab1, tab2 = st.tabs(["Login", "Registrar"])
        with tab1:
            login()
        with tab2:
            register()
    else:
        st.sidebar.title("Menu")

        menu_options = ['√Årvore de Decis√£o', 'In√≠cio', 'Recomenda√ß√µes', 'Compara√ß√£o de Frameworks', 'Logout']
        menu_option = st.sidebar.selectbox(
            "Escolha uma op√ß√£o",
            menu_options,
            index=menu_options.index(st.session_state.page) if st.session_state.page in menu_options else 0
        )

        st.session_state.page = menu_option

        if menu_option == '√Årvore de Decis√£o':
            run_decision_tree()
        elif menu_option == 'In√≠cio':
            show_home_page()
        elif menu_option == 'Recomenda√ß√µes':
            show_recommendation()
        elif menu_option == 'Compara√ß√£o de Frameworks':
            st.write("P√°gina de Compara√ß√£o de Frameworks em desenvolvimento.")
        elif menu_option == 'Logout':
            logout()

if __name__ == "__main__":
    main()
