import streamlit as st
from user_management import login, register, logout, is_authenticated
from decision_tree import run_decision_tree
from database import get_user_recommendations
from utils import init_session_state
from metrics import calcular_gini, calcular_entropia, calcular_profundidade_decisoria, calcular_pruning
import plotly.graph_objects as go

# Fun√ß√£o para exibir a p√°gina inicial
def show_home_page():
    st.title("SeletorDLTSaude")
    st.write("Bem-vindo ao SeletorDLTSaude, um sistema de recomenda√ß√£o de tecnologias de ledger distribu√≠do (DLT) para aplica√ß√µes em sa√∫de.")

    if st.button("Iniciar Question√°rio"):
        st.session_state.page = "Framework Proposto"
        st.rerun()

# Fun√ß√£o para exibir as m√©tricas calculadas
def show_metrics():
    st.header("M√©tricas e Diferenciais do Framework Proposto")

    # Calculate metrics (use actual data instead of examples)
    classes = {"Sim": 70, "N√£o": 30}
    decisoes = [3, 4, 2, 5]
    total_nos = 20
    nos_podados = 5
    
    gini = calcular_gini(classes)
    entropia = calcular_entropia(classes)
    profundidade = calcular_profundidade_decisoria(decisoes)
    pruning_ratio = calcular_pruning(total_nos, nos_podados)

    # Display metrics
    col1, col2 = st.columns(2)
    with col1:
        st.metric("Impureza de Gini", f"{gini:.2f}")
        st.metric("Entropia", f"{entropia:.2f}")
    with col2:
        st.metric("Profundidade Decis√≥ria", f"{profundidade:.2f}")
        st.metric("Pruning Ratio", f"{pruning_ratio:.2f}")

    # Graphical visualization
    fig = go.Figure(data=[
        go.Bar(name='M√©tricas', x=['Gini', 'Entropia', 'Profundidade', 'Pruning'],
               y=[gini, entropia, profundidade, pruning_ratio])
    ])
    st.plotly_chart(fig)

    # Explanation of metrics
    st.subheader("Explica√ß√£o das M√©tricas")
    st.write("""
    - **Impureza de Gini**: Mede a diversidade das classes em cada n√≥ da √°rvore.
    - **Entropia**: Quantifica a incerteza ou aleatoriedade nas decis√µes.
    - **Profundidade Decis√≥ria**: Indica a complexidade da √°rvore de decis√£o.
    - **Pruning Ratio**: Mostra a efic√°cia da poda na simplifica√ß√£o do modelo.
    """)

    # Differentials of the proposed framework
    st.subheader("Diferenciais do Framework Proposto")
    st.write("""
    1. **Adaptabilidade ao Contexto de Sa√∫de**: Nosso framework √© especialmente projetado para atender √†s necessidades espec√≠ficas do setor de sa√∫de.
    2. **Integra√ß√£o de M√∫ltiplos Crit√©rios**: Considera diversos fatores como seguran√ßa, escalabilidade e efici√™ncia energ√©tica na recomenda√ß√£o de DLTs.
    3. **Visualiza√ß√£o Interativa**: Oferece uma interface gr√°fica intuitiva para melhor compreens√£o das decis√µes.
    4. **Feedback Cont√≠nuo**: Permite que os usu√°rios forne√ßam feedback, melhorando continuamente as recomenda√ß√µes.
    5. **Atualiza√ß√£o em Tempo Real**: Incorpora as √∫ltimas tend√™ncias e avan√ßos em DLTs para o setor de sa√∫de.
    """)

# Fun√ß√£o para exibir o perfil do usu√°rio
def show_user_profile():
    st.header("Perfil do Usu√°rio")
    st.write(f"Bem-vindo, {st.session_state.username}!")

    recommendations = get_user_recommendations(st.session_state.username)
    
    if recommendations:
        st.subheader("Suas Recomenda√ß√µes Salvas:")
        for rec in recommendations:
            st.write(f"Cen√°rio: {rec['scenario']}")
            st.write(f"DLT Recomendada: {rec['dlt']}")
            st.write(f"Algoritmo de Consenso: {rec['consensus']}")
            st.write(f"Data: {rec['timestamp']}")
            st.write("---")
    else:
        st.write("Voc√™ ainda n√£o tem recomenda√ß√µes salvas.")

# Fun√ß√£o principal que controla a navega√ß√£o e o estado da sess√£o
def main():
    # Inicializa o estado da sess√£o se necess√°rio
    init_session_state()

    st.set_page_config(page_title="SeletorDLTSaude", page_icon="üè•", layout="wide")

    if not is_authenticated():  # Verifica se o usu√°rio est√° autenticado
        st.title("SeletorDLTSaude - Login")

        # Exibe abas para login e registro
        tab1, tab2 = st.tabs(["Login", "Registrar"])
        with tab1:
            login()
        with tab2:
            register()
    else:
        # Barra lateral com op√ß√µes de menu
        st.sidebar.title("Menu")
        menu_options = ['In√≠cio', 'Framework Proposto', 'M√©tricas', 'Perfil', 'Logout']

        # Exibe o seletor de op√ß√µes de menu e mant√©m a p√°gina corrente no estado de sess√£o
        menu_option = st.sidebar.selectbox(
            "Escolha uma op√ß√£o",
            menu_options,
            index=menu_options.index(st.session_state.page) if st.session_state.page in menu_options else 0
        )

        # Atualiza a p√°gina no estado da sess√£o com base na escolha
        st.session_state.page = menu_option

        # Controle de navega√ß√£o entre p√°ginas
        if st.session_state.page == 'In√≠cio':
            show_home_page()
        elif st.session_state.page == 'Framework Proposto':
            run_decision_tree()
        elif st.session_state.page == 'M√©tricas':
            show_metrics()
        elif st.session_state.page == 'Perfil':
            show_user_profile()
        elif st.session_state.page == 'Logout':
            logout()
            st.session_state.page = 'In√≠cio'  # Retorna √† p√°gina de login ap√≥s o logout

if __name__ == "__main__":
    main()
