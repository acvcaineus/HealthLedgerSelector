import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from user_management import login, register, is_authenticated, logout
from decision_tree import run_decision_tree
from decision_logic import get_recommendation, compare_algorithms, consensus_algorithms
from database import get_user_recommendations
from metrics import (calcular_gini, calcular_entropia, calcular_profundidade_decisoria, 
                    calcular_pruning, calcular_confiabilidade_recomendacao)
import traceback

def init_session_state():
    """Initialize all required session state variables with error handling"""
    try:
        if 'initialized' not in st.session_state:
            st.session_state.initialized = True
            st.session_state.authenticated = False
            st.session_state.username = None
            st.session_state.page = 'In√≠cio'
            st.session_state.answers = {}
            st.session_state.error = None
            st.session_state.loading = False
            st.session_state.recommendation = None
    except Exception as e:
        st.error(f"Error initializing session state: {str(e)}")
        st.session_state.error = str(e)

def show_reference_table():
    """Display reference table of DLT types and algorithms"""
    st.subheader("Tabela de Refer√™ncia de DLTs e Algoritmos")
    
    data = {
        'Grupo': [
            'Alta Seguran√ßa e Controle',
            'Alta Seguran√ßa e Controle',
            'Alta Efici√™ncia Operacional',
            'Escalabilidade e Governan√ßa Flex√≠vel',
            'Alta Escalabilidade em Redes IoT',
            'Alta Seguran√ßa e Descentraliza√ß√£o'
        ],
        'Tipo DLT': [
            'DLT Permissionada Privada',
            'DLT P√∫blica Permissionless',
            'DLT Permissionada Simples',
            'DLT H√≠brida',
            'DLT com Consenso Delegado',
            'DLT P√∫blica'
        ],
        'Exemplo': [
            'Hyperledger Fabric',
            'Bitcoin',
            'Quorum',
            'Ethereum 2.0',
            'IOTA',
            'Ethereum'
        ],
        'Algoritmo de Consenso': [
            'PBFT',
            'PoW',
            'RAFT/PoA',
            'PoS',
            'Tangle',
            'PoW/PoS'
        ],
        'Caso de Uso em Sa√∫de': [
            'Prontu√°rios Eletr√¥nicos',
            'Dados Cr√≠ticos de Sa√∫de',
            'Sistemas Locais',
            'Redes Regionais',
            'IoT M√©dico',
            'Ensaios Cl√≠nicos'
        ]
    }
    
    df = pd.DataFrame(data)
    st.table(df)

def create_gini_radar(gini):
    """Create Gini index radar visualization with error handling"""
    try:
        categories = ['Separa√ß√£o de Classes', 'Pureza dos Dados', 'Consist√™ncia', 'Precis√£o']
        fig = go.Figure()
        fig.add_trace(go.Scatterpolar(
            r=[1-gini, gini, 1-gini, gini],
            theta=categories,
            fill='toself',
            name='√çndice de Gini'
        ))
        fig.update_layout(
            polar=dict(radialaxis=dict(visible=True, range=[0, 1])),
            showlegend=True,
            title="An√°lise do √çndice de Gini"
        )
        return fig
    except Exception as e:
        st.error(f"Error creating Gini radar: {str(e)}")
        return None

def show_metrics():
    """Display metrics with enhanced explanations"""
    st.header("M√©tricas T√©cnicas do Processo de Decis√£o")
    
    try:
        if 'recommendation' in st.session_state:
            with st.spinner('Carregando m√©tricas...'):
                rec = st.session_state.recommendation
                if 'evaluation_matrix' in rec:
                    classes = {k: v['score'] for k, v in rec['evaluation_matrix'].items()}
                    gini = calcular_gini(classes)
                    entropy = calcular_entropia(classes)
                    
                    # Show Gini Index Visualization with explanation
                    st.subheader("1. √çndice de Gini")
                    with st.expander("Ver Explica√ß√£o do √çndice de Gini"):
                        st.markdown("""
                        ### O que √© o √çndice de Gini?
                        O √çndice de Gini mede a pureza da classifica√ß√£o das DLTs. √â calculado usando a f√≥rmula:
                        
                        $Gini = 1 - \sum_{i=1}^{n} p_i^2$
                        
                        Onde:
                        - $p_i$ √© a propor√ß√£o de cada classe no conjunto
                        
                        ### Interpreta√ß√£o dos Eixos:
                        - **Separa√ß√£o de Classes**: Indica qu√£o bem as DLTs s√£o distinguidas
                        - **Pureza dos Dados**: Medida da homogeneidade dos grupos
                        - **Consist√™ncia**: Estabilidade da classifica√ß√£o
                        - **Precis√£o**: Acur√°cia geral do modelo
                        
                        ### Interpreta√ß√£o dos Valores:
                        - Valores pr√≥ximos a 0: Melhor separa√ß√£o entre DLTs
                        - Valores pr√≥ximos a 1: Maior mistura entre categorias
                        """)
                    gini_fig = create_gini_radar(gini)
                    if gini_fig:
                        st.plotly_chart(gini_fig, use_container_width=True)
                    
                    # Show Entropy Evolution with explanation
                    st.subheader("2. Evolu√ß√£o da Entropia")
                    with st.expander("Ver Explica√ß√£o da Evolu√ß√£o da Entropia"):
                        st.markdown("""
                        ### O que √© a Entropia?
                        A Entropia mede a incerteza na classifica√ß√£o das DLTs ao longo do processo decis√≥rio.
                        
                        $Entropia = -\sum_{i=1}^{n} p_i \log_2(p_i)$
                        
                        ### Interpreta√ß√£o do Gr√°fico:
                        - **Eixo X**: N√∫mero de perguntas respondidas
                        - **Eixo Y**: Valor da entropia em bits
                        
                        ### Tend√™ncias:
                        - **Diminui√ß√£o**: Indica maior certeza na decis√£o
                        - **Aumento**: Indica maior incerteza ou complexidade
                        - **Estabiliza√ß√£o**: Indica converg√™ncia do processo decis√≥rio
                        """)
                    entropy_fig = create_entropy_graph(st.session_state.answers)
                    if entropy_fig:
                        st.plotly_chart(entropy_fig, use_container_width=True)
                    
                    # Show Decision Tree Metrics Dashboard with explanation
                    st.subheader("3. Dashboard de M√©tricas")
                    with st.expander("Ver Explica√ß√£o do Dashboard de M√©tricas"):
                        st.markdown("""
                        ### M√©tricas do Dashboard:
                        
                        1. **Profundidade da √Årvore**
                        - O que √©: N√∫mero m√©dio de decis√µes necess√°rias
                        - C√°lculo: $Profundidade = \sum(n√≠veis) / total\_decis√µes$
                        - Interpreta√ß√£o: Valores menores indicam processo mais direto
                        
                        2. **Taxa de Poda**
                        - O que √©: Propor√ß√£o de simplifica√ß√£o da √°rvore
                        - C√°lculo: $Taxa = (total\_n√≥s - n√≥s\_podados) / total\_n√≥s$
                        - Interpreta√ß√£o: Maior taxa indica melhor otimiza√ß√£o
                        
                        3. **√çndice de Confian√ßa**
                        - O que √©: Medida da confiabilidade da recomenda√ß√£o
                        - C√°lculo: $Confian√ßa = (max\_score - mean\_score) / max\_score$
                        - Interpreta√ß√£o: Valores acima de 70% indicam alta confiabilidade
                        """)
                    
                    depth = calcular_profundidade_decisoria(list(range(len(st.session_state.answers))))
                    total_nos = len(st.session_state.answers) * 2 + 1
                    nos_podados = total_nos - len(st.session_state.answers) - 1
                    pruning_ratio = calcular_pruning(total_nos, nos_podados)
                    confidence = rec.get('confidence_value', 0.0)
                    
                    metrics_fig = create_metrics_dashboard(depth, pruning_ratio, confidence)
                    if metrics_fig:
                        st.plotly_chart(metrics_fig, use_container_width=True)
        else:
            st.info("Complete o processo de sele√ß√£o para ver as m√©tricas.")
    except Exception as e:
        st.error(f"Error displaying metrics: {str(e)}")
        st.code(traceback.format_exc())

def main():
    """Main application with improved error handling and state management"""
    try:
        st.set_page_config(page_title="SeletorDLTSaude", page_icon="üè•", layout="wide")
        init_session_state()

        if st.session_state.error:
            show_fallback_ui()
            return

        if not is_authenticated():
            st.title("SeletorDLTSaude - Login")
            tab1, tab2 = st.tabs(["Login", "Registrar"])
            with tab1:
                login()
            with tab2:
                register()
        else:
            with st.sidebar:
                st.title("Menu")
                menu_options = ['In√≠cio', 'Framework Proposto', 'M√©tricas', 'Perfil', 'Logout']
                
                try:
                    menu_option = st.selectbox(
                        "Escolha uma op√ß√£o",
                        menu_options,
                        index=menu_options.index(st.session_state.page) if st.session_state.page in menu_options else 0
                    )
                    st.session_state.page = menu_option
                except Exception as e:
                    st.error(f"Error in navigation: {str(e)}")
                    menu_option = 'In√≠cio'

            try:
                if menu_option == 'In√≠cio':
                    with st.spinner('Carregando p√°gina inicial...'):
                        st.title("SeletorDLTSaude")
                        st.write("Bem-vindo ao sistema de sele√ß√£o de DLT para sa√∫de.")
                        show_reference_table()
                elif menu_option == 'Framework Proposto':
                    with st.spinner('Carregando framework...'):
                        run_decision_tree()
                elif menu_option == 'M√©tricas':
                    with st.spinner('Carregando m√©tricas...'):
                        show_metrics()
                elif menu_option == 'Perfil':
                    with st.spinner('Carregando perfil...'):
                        st.header(f"Perfil do Usu√°rio: {st.session_state.username}")
                        recommendations = get_user_recommendations(st.session_state.username)
                        if recommendations:
                            st.subheader("√öltimas Recomenda√ß√µes")
                            for rec in recommendations:
                                st.write(f"DLT: {rec['dlt']}")
                                st.write(f"Consenso: {rec['consensus']}")
                                st.write(f"Data: {rec['timestamp']}")
                                st.markdown("---")
                elif menu_option == 'Logout':
                    logout()
                    st.session_state.page = 'In√≠cio'
                    st.experimental_rerun()

            except Exception as e:
                st.error(f"Error loading content: {str(e)}")
                show_fallback_ui()

    except Exception as e:
        st.error(f"Critical error: {str(e)}")
        st.code(traceback.format_exc())
        reset_session_state()

if __name__ == "__main__":
    main()
