import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from user_management import login, register, is_authenticated, logout
from decision_tree import run_decision_tree
from decision_logic import compare_algorithms, consensus_algorithms
from database import get_user_recommendations
from metrics import (calcular_gini, calcular_entropia, calcular_profundidade_decisoria, 
                    calcular_pruning, calcular_confiabilidade_recomendacao)
from utils import init_session_state

def show_metrics():
    st.header("M√©tricas T√©cnicas do Processo de Decis√£o")
    
    # Gini Index Section
    st.subheader("1. √çndice de Gini")
    st.markdown("""
    O √çndice de Gini mede a impureza de um conjunto de dados. Em nossa √°rvore de decis√£o, 
    ele indica qu√£o bem as caracter√≠sticas distinguem entre diferentes DLTs.
    """)
    
    # LaTeX formula for Gini Index
    st.latex(r"Gini = 1 - \sum_{i=1}^{n} p_i^2")
    
    st.markdown("""
    Onde:
    - $p_i$ √© a propor√ß√£o de cada classe no conjunto
    - Valores pr√≥ximos a 0 indicam melhor separa√ß√£o
    - Valores pr√≥ximos a 1 indicam maior mistura
    """)
    
    # Example calculation
    if 'recommendation' in st.session_state:
        rec = st.session_state.recommendation
        if 'evaluation_matrix' in rec:
            classes = {k: v['score'] for k, v in rec['evaluation_matrix'].items()}
            gini = calcular_gini(classes)
            
            st.metric(
                label="√çndice de Gini Atual",
                value=f"{gini:.3f}",
                help="Quanto menor, melhor a separa√ß√£o entre as classes"
            )
    
    # Entropy Section
    st.subheader("2. Entropia")
    st.markdown("""
    A Entropia mede a aleatoriedade ou incerteza em nosso conjunto de decis√µes.
    Uma menor entropia indica decis√µes mais consistentes e confi√°veis.
    """)
    
    # LaTeX formula for Entropy
    st.latex(r"Entropia = -\sum_{i=1}^{n} p_i \log_2(p_i)")
    
    st.markdown("""
    Onde:
    - $p_i$ √© a probabilidade de cada classe
    - Logaritmo na base 2 √© usado para medir em bits
    - Menor entropia indica maior certeza na decis√£o
    """)
    
    if 'recommendation' in st.session_state:
        rec = st.session_state.recommendation
        if 'evaluation_matrix' in rec:
            classes = {k: v['score'] for k, v in rec['evaluation_matrix'].items()}
            entropy = calcular_entropia(classes)
            
            st.metric(
                label="Entropia Atual",
                value=f"{entropy:.3f} bits",
                help="Quanto menor, mais certeza na decis√£o"
            )
    
    # Decision Tree Metrics
    st.subheader("3. M√©tricas da √Årvore de Decis√£o")
    col1, col2 = st.columns(2)
    
    with col1:
        if 'answers' in st.session_state:
            depth = calcular_profundidade_decisoria(list(range(len(st.session_state.answers))))
            st.metric(
                label="Profundidade da √Årvore",
                value=f"{depth:.1f}",
                help="N√∫mero m√©dio de decis√µes necess√°rias"
            )
    
    with col2:
        if 'recommendation' in st.session_state:
            total_nos = len(st.session_state.answers) * 2 + 1
            nos_podados = total_nos - len(st.session_state.answers) - 1
            pruning_ratio = calcular_pruning(total_nos, nos_podados)
            st.metric(
                label="Taxa de Poda",
                value=f"{pruning_ratio:.2%}",
                help="Porcentagem de n√≥s removidos para simplifica√ß√£o"
            )

def show_reference_table():
    # Updated table structure with data from the provided file
    dlt_data = {
        'DLT': [
            'Hyperledger Fabric', 'Corda', 'Quorum', 'VeChain', 'IOTA',
            'Ripple (XRP Ledger)', 'Stellar', 'Bitcoin', 'Ethereum (PoW)',
            'Ethereum 2.0 (PoS)'
        ],
        'Tipo de DLT': [
            'DLT Permissionada Privada', 'DLT Permissionada Simples', 'DLT H√≠brida',
            'DLT H√≠brida', 'DLT com Consenso Delegado', 'DLT com Consenso Delegado',
            'DLT com Consenso Delegado', 'DLT P√∫blica', 'DLT P√∫blica',
            'DLT P√∫blica Permissionless'
        ],
        'Grupo de Algoritmo': [
            'Alta Seguran√ßa e Controle dos dados sens√≠veis',
            'Alta Seguran√ßa e Controle dos dados sens√≠veis',
            'Escalabilidade e Governan√ßa Flex√≠vel',
            'Alta Efici√™ncia Operacional em redes locais',
            'Alta Escalabilidade em Redes IoT',
            'Alta Efici√™ncia Operacional em redes locais',
            'Alta Efici√™ncia Operacional em redes locais',
            'Alta Seguran√ßa e Descentraliza√ß√£o de dados cr√≠ticos',
            'Alta Seguran√ßa e Descentraliza√ß√£o de dados cr√≠ticos',
            'Escalabilidade e Governan√ßa Flex√≠vel'
        ],
        'Algoritmo de Consenso': [
            'RAFT/IBFT', 'RAFT', 'RAFT/IBFT', 'PoA', 'Tangle',
            'Ripple Consensus Algorithm', 'SCP', 'PoW', 'PoW', 'PoS'
        ],
        'Principais Caracter√≠sticas': [
            'Alta toler√¢ncia a falhas, consenso r√°pido em ambientes permissionados',
            'Consenso baseado em l√≠deres, adequado para redes privadas',
            'Flexibilidade de governan√ßa, consenso eficiente para redes h√≠bridas',
            'Alta efici√™ncia, baixa lat√™ncia, consenso delegado a validadores autorizados',
            'Escalabilidade alta, arquitetura sem blocos, adequada para IoT',
            'Consenso r√°pido, baixa lat√™ncia, baseado em validadores confi√°veis',
            'Consenso baseado em qu√≥rum, alta efici√™ncia, toler√¢ncia a falhas',
            'Seguran√ßa alta, descentraliza√ß√£o, consumo elevado de energia',
            'Seguran√ßa alta, descentraliza√ß√£o, escalabilidade limitada, alto custo',
            'Efici√™ncia energ√©tica, incentivo √† participa√ß√£o, redu√ß√£o da centraliza√ß√£o'
        ],
        'Estudos de Uso': [
            'Guardtime: Aplicado em sistemas de sa√∫de da Est√¥nia',
            'ProCredEx: Valida√ß√£o de credenciais de profissionais de sa√∫de nos EUA',
            'Chronicled (Mediledger Project): Rastreamento de medicamentos',
            'FarmaTrust: Rastreamento de medicamentos e combate √† falsifica√ß√£o',
            'Patientory: Compartilhamento de dados de pacientes via IoT',
            'Change Healthcare: Gest√£o de ciclo de receita',
            'MedicalChain: Controle de dados e consultas telem√©dicas',
            'Guardtime: Rastreamento de dados de sa√∫de em redes p√∫blicas',
            'Embleema: Desenvolvimento de medicamentos e ensaios cl√≠nicos',
            'MTBC: Gest√£o de registros eletr√¥nicos de sa√∫de (EHR)'
        ]
    }
    
    df = pd.DataFrame(dlt_data)
    st.table(df)

def show_home_page():
    st.title("SeletorDLTSaude - Sistema de Sele√ß√£o de DLT para Sa√∫de")
    st.write("Bem-vindo ao SeletorDLTSaude, uma aplica√ß√£o para ajudar na escolha de tecnologias de ledger distribu√≠do (DLT) para projetos de sa√∫de.")

    st.markdown("## Refer√™ncia de DLTs e Algoritmos")
    st.write("Abaixo est√° uma tabela detalhada com as principais DLTs e suas caracter√≠sticas para aplica√ß√µes em sa√∫de:")
    show_reference_table()

    st.markdown("---")
    st.subheader("Iniciar o Processo de Sele√ß√£o de DLT")
    if st.button("Iniciar Question√°rio", key="start_questionnaire", help="Clique aqui para come√ßar o processo de sele√ß√£o de DLT"):
        st.session_state.page = "Framework Proposto"
        st.experimental_rerun()

def show_user_profile():
    st.header(f"Perfil do Usu√°rio: {st.session_state.username}")
    recommendations = get_user_recommendations(st.session_state.username)
    if recommendations:
        st.subheader("√öltimas Recomenda√ß√µes")
        for rec in recommendations:
            st.write(f"DLT: {rec['dlt']}")
            st.write(f"Consenso: {rec['consensus']}")
            st.write(f"Data: {rec['timestamp']}")
            st.markdown("---")

def main():
    st.set_page_config(page_title="SeletorDLTSaude", page_icon="üè•", layout="wide")
    init_session_state()

    if not is_authenticated():
        st.title("SeletorDLTSaude - Login")
        tab1, tab2 = st.tabs(["Login", "Registrar"])
        with tab1:
            login()
        with tab2:
            register()
    else:
        st.sidebar.title("Menu")
        menu_options = ['In√≠cio', 'Framework Proposto', 'M√©tricas', 'Perfil', 'Logout']
        
        menu_option = st.sidebar.selectbox(
            "Escolha uma op√ß√£o",
            menu_options,
            index=menu_options.index(st.session_state.page) if st.session_state.page in menu_options else 0
        )
        
        st.session_state.page = menu_option
        
        if menu_option == 'In√≠cio':
            show_home_page()
        elif menu_option == 'Framework Proposto':
            run_decision_tree()
        elif menu_option == 'M√©tricas':
            show_metrics()
        elif menu_option == 'Perfil':
            show_user_profile()
        elif menu_option == 'Logout':
            logout()
            st.session_state.page = 'In√≠cio'
            st.experimental_rerun()

if __name__ == "__main__":
    main()
