import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from user_management import login, register, is_authenticated, logout
from decision_tree import run_decision_tree
from decision_logic import get_recommendation, compare_algorithms, consensus_algorithms
from database import get_user_recommendations
from metrics import (calcular_gini, calcular_entropia, calcular_profundidade_decisoria, 
                    calcular_pruning, calcular_confiabilidade_recomendacao)
import traceback

def init_session_state():
    """Initialize all required session state variables with error handling"""
    try:
        if 'initialized' not in st.session_state:
            st.session_state.update({
                'initialized': True,
                'authenticated': False,
                'username': None,
                'page': 'In√≠cio',
                'answers': {},
                'error': None,
                'loading': False,
                'recommendation': None
            })
    except Exception as e:
        st.error(f"Error initializing session state: {str(e)}")
        st.session_state.error = str(e)


def main():
    st.set_page_config(page_title="SeletorDLTSaude", page_icon="üè•", layout="wide")
    init_session_state()

    if not is_authenticated():
        st.title("SeletorDLTSaude - Login")
        tab1, tab2 = st.tabs(["Login", "Registrar"])
        with tab1:
            login()
        with tab2:
            register()
    else:
        with st.sidebar:
            st.title("Menu")
            menu_options = [
                'In√≠cio', 'Framework Proposto', 'M√©tricas', 'Compara√ß√µes Benchs',
                'Perfil', 'Logout'
            ]

            try:
                menu_option = st.selectbox(
                    "Escolha uma op√ß√£o",
                    menu_options,
                    index=menu_options.index(st.session_state.page) if st.session_state.page in menu_options else 0
                )
                st.session_state.page = menu_option
            except Exception as e:
                st.error(f"Error in navigation: {str(e)}")
                menu_option = 'In√≠cio'

            if menu_option == 'In√≠cio':
                show_home_page()
            elif menu_option == 'Framework Proposto':
                run_decision_tree()
            elif menu_option == 'M√©tricas':
                show_metrics()
            elif menu_option == 'Compara√ß√µes Benchs':
                show_bench_comparisons()
            elif menu_option == 'Perfil':
                st.header(f"Perfil do Usu√°rio: {st.session_state.username}")
                recommendations = get_user_recommendations(st.session_state.username)
                if recommendations:
                    st.subheader("√öltimas Recomenda√ß√µes")
                    for rec in recommendations:
                        st.write(f"DLT: {rec['dlt']}")
                        st.write(f"Consenso: {rec['consensus']}")
                        st.write(f"Data: {rec['timestamp']}")
                        st.markdown("---")
            elif menu_option == 'Logout':
                logout()
                st.session_state.page = 'In√≠cio'
                st.experimental_rerun()

if __name__ == "__main__":
    main()
def show_home_page():
    """Display home page with framework explanation and reference table"""
    st.title("SeletorDLTSaude")
    st.write("Bem-vindo ao sistema de sele√ß√£o de DLT para sa√∫de.")

    # Framework explanation section
    st.header("Objetivo do Framework")
    st.markdown('''
        O SeletorDLTSaude √© uma aplica√ß√£o interativa desenvolvida para ajudar profissionais 
        e pesquisadores a escolherem a melhor solu√ß√£o de Distributed Ledger Technology (DLT) 
        e o algoritmo de consenso mais adequado para projetos de sa√∫de.

        A aplica√ß√£o guia o usu√°rio atrav√©s de um processo estruturado em quatro fases:
        - **Fase de Aplica√ß√£o**: Avalia requisitos de privacidade e integra√ß√£o
        - **Fase de Consenso**: Analisa necessidades de seguran√ßa e efici√™ncia
        - **Fase de Infraestrutura**: Considera escalabilidade e performance
        - **Fase de Internet**: Avalia governan√ßa e interoperabilidade
    ''')

    # Reference table section
    st.subheader("Tabela de Refer√™ncia de DLTs e Algoritmos")
    data = {
        'Grupo': [
            'Alta Seguran√ßa e Controle',
            'Alta Seguran√ßa e Descentraliza√ß√£o',
            'Alta Seguran√ßa e Descentraliza√ß√£o',
            'Alta Efici√™ncia Operacional',
            'Alta Efici√™ncia Operacional',
            'Escalabilidade e Governan√ßa Flex√≠vel',
            'Escalabilidade e Governan√ßa Flex√≠vel',
            'Alta Escalabilidade em Redes IoT'
        ],
        'Tipo de DLT': [
            'DLT Permissionada Privada',
            'DLT P√∫blica Permissionless',
            'DLT P√∫blica Permissionless',
            'DLT Permissionada Simples',
            'DLT Permissionada Simples',
            'DLT H√≠brida',
            'DLT com Consenso Delegado',
            'DLT P√∫blica'
        ],
        'Nome DLT': [
            'Hyperledger Fabric',
            'Bitcoin',
            'Ethereum',
            'Quorum',
            'VeChain',
            'Ethereum 2.0',
            'EOS',
            'IOTA'
        ],
        'Algoritmo de Consenso': [
            'PBFT',
            'PoW',
            'PoS (em transi√ß√£o)',
            'RAFT/PoA',
            'PoA',
            'PoS',
            'DPoS',
            'Tangle'
        ],
        'Caracter√≠sticas': [
            'Seguran√ßa elevada e resili√™ncia contra falhas bizantinas; adequada para ambientes altamente controlados e permissionados.',
            'Oferece seguran√ßa m√°xima e total descentraliza√ß√£o, essencial para redes abertas onde a integridade dos dados √© crucial.',
            'Com transi√ß√£o para PoS, oferece alta seguran√ßa e efici√™ncia energ√©tica para aplica√ß√µes que exigem menos processamento intensivo.',
            'Alta efici√™ncia em redes permissionadas; consenso baseado em autoridade ideal para redes empresariais.',
            'Alta efici√™ncia e controle simplificado para gest√£o de cadeias de suprimento em redes permissionadas.',
            'Alta escalabilidade e efici√™ncia energ√©tica, ideal para redes de sa√∫de regionalizadas.',
            'Governan√ßa flex√≠vel e performance otimizada com arquitetura semi-descentralizada.',
            'Alta escalabilidade e processamento em tempo real para redes de dispositivos IoT em sa√∫de.'
        ],
        'Casos de Uso': [
            'Prontu√°rios eletr√¥nicos, integra√ß√£o de dados sens√≠veis entre institui√ß√µes de sa√∫de',
            'Sistemas de pagamento descentralizados, dados cr√≠ticos de sa√∫de p√∫blica',
            'Dados cr√≠ticos de sa√∫de p√∫blica, governan√ßa participativa',
            'Redes locais de hospitais, rastreamento de medicamentos',
            'Rastreamento de medicamentos, gest√£o de insumos hospitalares',
            'Monitoramento de sa√∫de p√∫blica, integra√ß√£o de EHRs',
            'Aplicativos de telemedicina, redes de colabora√ß√£o em pesquisa',
            'Monitoramento de dispositivos IoT hospitalares, dados em tempo real'
        ]
    }
    df = pd.DataFrame(data)
    st.table(df)

    # Implementation details section
    with st.expander("Ver Detalhes de Implementa√ß√£o e Refer√™ncias"):
        st.markdown('''
            ### Casos de Implementa√ß√£o Real
            - **MyClinic**: Dados descentralizados em cl√≠nicas privadas (Hyperledger Fabric)
            - **MediLedger**: Rastreamento de medicamentos na cadeia farmac√™utica (Bitcoin)
            - **Patientory**: Armazenamento seguro de dados de pacientes (Ethereum)
            - **PharmaLedger**: Rede permissionada para suprimentos farmac√™uticos (Quorum)
            - **VeChain ToolChain**: Rastreabilidade de produtos m√©dicos
            - **Ethereum-based Health Chain**: Integra√ß√£o de EHRs para hospitais regionais
            - **Telos Blockchain**: Rede colaborativa para dados de sa√∫de em telemedicina
            - **IOTA Healthcare IoT**: Monitoramento IoT de dispositivos m√©dicos

            ### Refer√™ncias Acad√™micas
            - MEHMOOD et al. (2025) - BLPCA-ledger: A lightweight plenum consensus protocols
            - POPOOLA et al. (2024) - Security and privacy in smart home healthcare schemes
            - AKOH ATADOGA et al. (2024) - Blockchain in healthcare: A comprehensive review
            - DHINGRA et al. (2024) - Blockchain Technology Applications in Healthcare
            - AL-NBHANY et al. (2024) - Blockchain-IoT Healthcare Applications and Trends
        ''')

    # Navigation button with enhanced styling
    st.markdown("""
        <style>
        div.stButton > button:first-child {
            background-color: #4CAF50;
            color: white;
            padding: 15px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            border-radius: 4px;
            border: none;
        }
        </style>
    """, unsafe_allow_html=True)

    if st.button("Iniciar Sele√ß√£o de DLT", type="primary"):
        st.session_state.page = 'Framework Proposto'
        st.experimental_rerun()
