import streamlit as st
from user_management import login, register, is_authenticated, logout
from utils import init_session_state
from decision_tree import run_decision_tree
from decision_logic import get_recommendation, compare_algorithms, select_final_algorithm
import pandas as pd
import math

# Fun√ß√µes para c√°lculo das m√©tricas da √°rvore de decis√£o
def calcular_gini(classes):
    """Calcula a impureza de Gini."""
    total = sum(classes.values())
    gini = 1 - sum((count / total) ** 2 for count in classes.values())
    return gini

def calcular_entropia(classes):
    """Calcula a entropia."""
    total = sum(classes.values())
    entropia = -sum((count / total) * math.log2(count / total) for count in classes.values() if count != 0)
    return entropia

def calcular_profundidade_decisoria(decisoes):
    """Calcula a profundidade m√©dia da √°rvore de decis√£o."""
    if not decisoes:
        return 0
    profundidade_total = sum(decisoes)
    return profundidade_total / len(decisoes)

def calcular_pruning(total_nos, nos_podados):
    """Calcula o pruning ratio (propor√ß√£o de n√≥s podados)."""
    if total_nos == 0:
        return 0
    pruning_ratio = (total_nos - nos_podados) / total_nos
    return pruning_ratio

# Fun√ß√£o para exibir a p√°gina inicial
def show_home_page():
    st.title("SeletorDLTSaude")
    st.write("Bem-vindo ao SeletorDLTSaude, um sistema de recomenda√ß√£o de tecnologias de ledger distribu√≠do (DLT) para aplica√ß√µes em sa√∫de.")

    if st.button("Iniciar Question√°rio"):
        st.session_state.page = "√Årvore de Decis√£o"
        st.rerun()

# Fun√ß√£o para exibir as m√©tricas calculadas
def show_metrics():
    st.header("M√©tricas da √Årvore de Decis√£o")

    # Exemplo de respostas classificadas para calcular m√©tricas
    classes = {"Sim": 70, "N√£o": 30}  # Classes de respostas para calcular Gini e Entropia
    decisoes = [3, 4, 2, 5]  # Exemplo de profundidade de decis√£o
    total_nos = 20
    nos_podados = 5

    gini = calcular_gini(classes)
    entropia = calcular_entropia(classes)
    profundidade = calcular_profundidade_decisoria(decisoes)
    pruning_ratio = calcular_pruning(total_nos, nos_podados)

    st.write(f"**Impureza de Gini**: {gini:.2f}")
    st.write(f"**Entropia**: {entropia:.2f}")
    st.write(f"**Profundidade Decis√≥ria**: {profundidade:.2f}")
    st.write(f"**Pruning Ratio**: {pruning_ratio:.2f}")

# Fun√ß√£o principal que controla a navega√ß√£o e o estado da sess√£o
def main():
    # Inicializa o estado da sess√£o se necess√°rio
    if 'page' not in st.session_state:
        st.session_state.page = 'In√≠cio'

    st.set_page_config(page_title="SeletorDLTSaude", page_icon="üè•", layout="wide")

    if not is_authenticated():  # Verifica se o usu√°rio est√° autenticado
        st.title("SeletorDLTSaude - Login")

        # Exibe abas para login e registro
        tab1, tab2 = st.tabs(["Login", "Registrar"])
        with tab1:
            login()
        with tab2:
            register()
    else:
        # Barra lateral com op√ß√µes de menu
        st.sidebar.title("Menu")
        menu_options = ['In√≠cio', '√Årvore de Decis√£o', 'M√©tricas', 'Logout']

        # Exibe o seletor de op√ß√µes de menu e mant√©m a p√°gina corrente no estado de sess√£o
        menu_option = st.sidebar.selectbox(
            "Escolha uma op√ß√£o",
            menu_options,
            index=menu_options.index(st.session_state.page) if 'page' in st.session_state and st.session_state.page in menu_options else 0
        )

        # Atualiza a p√°gina no estado da sess√£o com base na escolha
        st.session_state.page = menu_option

        # Controle de navega√ß√£o entre p√°ginas
        if st.session_state.page == 'In√≠cio':
            show_home_page()
        elif st.session_state.page == '√Årvore de Decis√£o':
            run_decision_tree()  # Executa a √°rvore de decis√£o
        elif st.session_state.page == 'M√©tricas':
            show_metrics()  # Exibe as m√©tricas calculadas
        elif st.session_state.page == 'Logout':
            logout()
            st.session_state.page = 'In√≠cio'  # Retorna √† p√°gina de login ap√≥s o logout

if __name__ == "__main__":
    main()
