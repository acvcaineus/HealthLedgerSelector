import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from user_management import login, register, is_authenticated, logout
from decision_tree import run_decision_tree
from decision_logic import compare_algorithms, consensus_algorithms
from database import get_user_recommendations
from metrics import (calcular_gini, calcular_entropia, calcular_profundidade_decisoria, 
                    calcular_pruning, calcular_peso_caracteristica, calcular_jaccard_similarity,
                    calcular_confiabilidade_recomendacao, calcular_metricas_desempenho)
from utils import init_session_state

def show_home_page():
    st.title("SeletorDLTSaude - Sistema de Sele√ß√£o de DLT para Sa√∫de")
    st.write("Bem-vindo ao SeletorDLTSaude, uma aplica√ß√£o para ajudar na escolha de tecnologias de ledger distribu√≠do (DLT) para projetos de sa√∫de.")

    st.subheader("Informa√ß√µes sobre DLTs para Sa√∫de")
    dlt_data = {
        'DLT': ['Hyperledger Fabric', 'VeChain', 'Quorum (Mediledger)', 'IOTA', 'Ripple (XRP Ledger)', 'Stellar', 'Bitcoin', 'Ethereum (PoW)', 'Ethereum 2.0 (PoS)'],
        'Grupo de Algoritmo': ['Alta Seguran√ßa e Controle dos dados', 'Alta Efici√™ncia Operacional em redes locais', 'Escalabilidade e Governan√ßa Flex√≠vel', 'Alta Escalabilidade em Redes IoT', 'Alta Efici√™ncia Operacional em redes locais', 'Alta Efici√™ncia Operacional em redes locais', 'Alta Seguran√ßa e Descentraliza√ß√£o', 'Alta Seguran√ßa e Descentraliza√ß√£o', 'Escalabilidade e Governan√ßa Flex√≠vel'],
        'Algoritmo de Consenso': ['RAFT/IBFT', 'Proof of Authority (PoA)', 'RAFT/IBFT', 'Tangle', 'Ripple Consensus Algorithm', 'Stellar Consensus Protocol (SCP)', 'Proof of Work (PoW)', 'Proof of Work (PoW)', 'Proof of Stake (PoS)'],
        'Caso de Uso': ['Rastreabilidade de medicamentos na cadeia de suprimentos', 'Rastreamento de suprimentos m√©dicos e cadeia farmac√™utica', 'Monitoramento e rastreamento de medicamentos', 'Compartilhamento seguro de dados de pacientes via IoT', 'Processamento eficiente de transa√ß√µes e seguran√ßa de dados', 'Gerenciamento de transa√ß√µes de pagamentos entre provedores', 'Armazenamento seguro de dados m√©dicos cr√≠ticos', 'Contratos inteligentes e registros m√©dicos eletr√¥nicos', 'Acelera√ß√£o de ensaios cl√≠nicos e compartilhamento de dados'],
        'Desafios e Limita√ß√µes': ['Baixa escalabilidade para redes muito grandes', 'Depend√™ncia de validadores centralizados', 'Escalabilidade limitada em redes p√∫blicas', 'Maturidade tecnol√≥gica (n√£o totalmente implementada)', 'Centraliza√ß√£o nos validadores principais', 'Governan√ßa dependente do quorum', 'Consumo energ√©tico elevado, escalabilidade limitada', 'Consumo de energia elevado', 'Governan√ßa flex√≠vel, mas centraliza√ß√£o √© poss√≠vel'],
        'Refer√™ncia Bibliogr√°fica': ['Mehmood et al. (2025)', 'Popoola et al. (2024)', 'Mehmood et al. (2025)', 'Salim et al. (2024)', 'Makhdoom et al. (2024)', 'Javed et al. (2024)', 'Liu et al. (2024)', 'Makhdoom et al. (2024)', 'Nawaz et al. (2024)']
    }
    df = pd.DataFrame(dlt_data)
    st.table(df)

    st.markdown("---")
    st.subheader("Iniciar o Processo de Sele√ß√£o de DLT")
    if st.button("Iniciar Question√°rio", key="start_questionnaire", help="Clique aqui para come√ßar o processo de sele√ß√£o de DLT"):
        st.success("Question√°rio iniciado! Redirecionando para o Framework Proposto...")
        st.session_state.page = "Framework Proposto"
        st.rerun()  # Updated to use rerun

def show_framework_info():
    st.header("Sobre o Framework de Sele√ß√£o de DLT")
    
    st.subheader("Crit√©rios de Avalia√ß√£o")
    criteria_data = {
        "Crit√©rio": ["Seguran√ßa", "Escalabilidade", "Efici√™ncia Energ√©tica", "Governan√ßa"],
        "Peso": ["40%", "30%", "20%", "10%"],
        "Descri√ß√£o": [
            "Prote√ß√£o de dados sens√≠veis e resist√™ncia a ataques",
            "Capacidade de lidar com grande volume de transa√ß√µes",
            "Consumo de energia e sustentabilidade",
            "Flexibilidade na gest√£o e controle da rede"
        ]
    }
    st.table(pd.DataFrame(criteria_data))
    
    st.subheader("Embasamento Acad√™mico")
    st.write("""
    O framework √© baseado em pesquisas recentes na √°rea de blockchain e DLT aplicadas √† sa√∫de:
    
    1. **Seguran√ßa e Privacidade**: Popoola et al. (2024) destacam a import√¢ncia da seguran√ßa em sistemas de sa√∫de baseados em IoT.
    
    2. **Escalabilidade**: Salim et al. (2024) apresentam um esquema federado de blockchain para Healthcare 4.0.
    
    3. **Efici√™ncia Energ√©tica**: Liu et al. (2024) abordam a integra√ß√£o de blockchain em sistemas de sa√∫de.
    
    4. **Governan√ßa**: Nawaz et al. (2024) exploram sistemas de rastreabilidade na cadeia de suprimentos.
    """)

def show_recommendation_comparison():
    st.header("Compara√ß√£o de Algoritmos de Consenso")
    
    if 'recommendation' not in st.session_state:
        st.warning("Por favor, complete o question√°rio primeiro para ver as compara√ß√µes.")
        return
        
    rec = st.session_state.recommendation
    if 'consensus_group' not in rec:
        st.warning("Grupo de consenso n√£o dispon√≠vel.")
        return
        
    comparison_data = compare_algorithms(rec['consensus_group'])
    
    metrics = list(comparison_data.keys())
    algorithms = list(comparison_data['Seguran√ßa'].keys())
    
    fig = go.Figure()
    for alg in algorithms:
        fig.add_trace(go.Scatterpolar(
            r=[float(comparison_data[metric][alg]) for metric in metrics],
            theta=metrics,
            name=alg,
            fill='toself'
        ))
    
    fig.update_layout(
        polar=dict(radialaxis=dict(visible=True, range=[0, 5])),
        showlegend=True,
        title="Compara√ß√£o de M√©tricas por Algoritmo"
    )
    st.plotly_chart(fig)
    
    st.subheader("M√©tricas Detalhadas")
    for metric in metrics:
        st.write(f"**{metric}**")
        metric_data = {
            "Algoritmo": list(comparison_data[metric].keys()),
            "Pontua√ß√£o": [float(val) for val in comparison_data[metric].values()]
        }
        st.table(pd.DataFrame(metric_data))

def show_metrics():
    st.header("M√©tricas Adotadas")
    
    st.subheader("F√≥rmulas e C√°lculos")
    
    st.write("### 1. √çndice de Gini")
    st.latex(r"Gini = 1 - \sum_{i=1}^{n} p_i^2")
    st.write("Onde:")
    st.write("- p_i √© a propor√ß√£o de cada classe no conjunto")
    st.write("- Valores mais pr√≥ximos de 0 indicam maior pureza nas decis√µes")
    
    st.write("### 2. Entropia")
    st.latex(r"Entropia = -\sum_{i=1}^{n} p_i \log_2(p_i)")
    st.write("Onde:")
    st.write("- p_i √© a propor√ß√£o de cada classe")
    st.write("- Menor entropia indica decis√µes mais consistentes")
    
    st.write("### 3. Pontua√ß√£o Ponderada")
    st.latex(r"Score = \sum_{i=1}^{n} w_i \times v_i")
    st.write("Onde:")
    st.write("- w_i √© o peso de cada crit√©rio")
    st.write("- v_i √© o valor normalizado do crit√©rio")
    
    example_data = {
        "M√©trica": ["Seguran√ßa", "Escalabilidade", "Efici√™ncia", "Governan√ßa"],
        "Valor Base": [4.5, 3.8, 4.2, 3.9],
        "Peso": [0.4, 0.3, 0.2, 0.1],
        "Score Final": [1.8, 1.14, 0.84, 0.39]
    }
    st.table(pd.DataFrame(example_data))
    
    total_score = sum(float(score) for score in example_data["Score Final"])
    st.write(f"Score Total do Exemplo: {total_score:.2f}")

def show_user_profile():
    st.header(f"Perfil do Usu√°rio: {st.session_state.username}")
    recommendations = get_user_recommendations(st.session_state.username)
    if recommendations:
        st.subheader("√öltimas Recomenda√ß√µes")
        for rec in recommendations:
            st.write(f"DLT: {rec['dlt']}")
            st.write(f"Consenso: {rec['consensus']}")
            st.write(f"Data: {rec['timestamp']}")
            st.markdown("---")

def main():
    st.set_page_config(page_title="SeletorDLTSaude", page_icon="üè•", layout="wide")
    init_session_state()

    if not is_authenticated():
        st.title("SeletorDLTSaude - Login")
        tab1, tab2 = st.tabs(["Login", "Registrar"])
        with tab1:
            login()
        with tab2:
            register()
    else:
        st.sidebar.title("Menu")
        menu_options = ['In√≠cio', 'Framework Proposto', 'Compara√ß√£o de Recomenda√ß√µes', 
                       'M√©tricas', 'Sobre o Framework', 'Perfil', 'Logout']
        
        menu_option = st.sidebar.selectbox(
            "Escolha uma op√ß√£o",
            menu_options,
            index=menu_options.index(st.session_state.page) if st.session_state.page in menu_options else 0
        )
        
        st.session_state.page = menu_option
        
        if menu_option == 'In√≠cio':
            show_home_page()
        elif menu_option == 'Framework Proposto':
            run_decision_tree()
        elif menu_option == 'Compara√ß√£o de Recomenda√ß√µes':
            show_recommendation_comparison()
        elif menu_option == 'M√©tricas':
            show_metrics()
        elif menu_option == 'Sobre o Framework':
            show_framework_info()
        elif menu_option == 'Perfil':
            show_user_profile()
        elif menu_option == 'Logout':
            logout()
            st.session_state.page = 'In√≠cio'
            st.rerun()  # Updated to use rerun

if __name__ == "__main__":
    main()
