import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from decision_logic import get_recommendation, compare_algorithms, consensus_algorithms, reference_data

def show_evaluation_matrices():
    """Display evaluation matrices with explanations"""
    
    # Security Metrics Matrix
    with st.expander("üîí Matriz de Seguran√ßa", expanded=False):
        st.markdown("""
            ### M√©tricas de Seguran√ßa
            Esta matriz avalia os aspectos de seguran√ßa da DLT selecionada:
            
            | M√©trica | Descri√ß√£o | Peso |
            |---------|-----------|------|
            | Privacidade | Prote√ß√£o de dados sens√≠veis | 40% |
            | Autentica√ß√£o | Controle de acesso | 30% |
            | Criptografia | For√ßa dos algoritmos | 30% |
        """)
        
        security_data = {
            'DLT': ['Hyperledger Fabric', 'Ethereum', 'IOTA'],
            'Privacidade': [5, 4, 3],
            'Autentica√ß√£o': [5, 4, 4],
            'Criptografia': [5, 5, 4]
        }
        st.table(pd.DataFrame(security_data))
    
    # Scalability Matrix
    with st.expander("üìà Matriz de Escalabilidade", expanded=False):
        st.markdown("""
            ### M√©tricas de Escalabilidade
            Avalia√ß√£o da capacidade de crescimento e adapta√ß√£o:
            
            | M√©trica | Descri√ß√£o | Peso |
            |---------|-----------|------|
            | TPS | Transa√ß√µes por segundo | 40% |
            | Lat√™ncia | Tempo de resposta | 30% |
            | Throughput | Volume de dados | 30% |
        """)
        
        scalability_data = {
            'DLT': ['Hyperledger Fabric', 'Ethereum', 'IOTA'],
            'TPS': [3000, 15, 1000],
            'Lat√™ncia': ['1s', '15s', '60s'],
            'Throughput': ['Alto', 'M√©dio', 'Alto']
        }
        st.table(pd.DataFrame(scalability_data))
    
    # Energy Efficiency Matrix
    with st.expander("‚ö° Matriz de Efici√™ncia Energ√©tica", expanded=False):
        st.markdown("""
            ### M√©tricas de Efici√™ncia Energ√©tica
            An√°lise do consumo e otimiza√ß√£o de recursos:
            
            | M√©trica | Descri√ß√£o | Peso |
            |---------|-----------|------|
            | Consumo | kWh por transa√ß√£o | 40% |
            | Sustentabilidade | Impacto ambiental | 30% |
            | Otimiza√ß√£o | Uso de recursos | 30% |
        """)
        
        energy_data = {
            'DLT': ['Hyperledger Fabric', 'Ethereum', 'IOTA'],
            'Consumo (kWh)': [0.001, 62, 0.0001],
            'Sustentabilidade': ['Alta', 'Baixa', 'Alta'],
            'Otimiza√ß√£o': ['Alta', 'M√©dia', 'Alta']
        }
        st.table(pd.DataFrame(energy_data))
    
    # Governance Matrix
    with st.expander("üèõÔ∏è Matriz de Governan√ßa", expanded=False):
        st.markdown("""
            ### M√©tricas de Governan√ßa
            Avalia√ß√£o dos aspectos de controle e administra√ß√£o:
            
            | M√©trica | Descri√ß√£o | Peso |
            |---------|-----------|------|
            | Controle | N√≠vel de permissionamento | 40% |
            | Auditoria | Rastreabilidade | 30% |
            | Flexibilidade | Adaptabilidade | 30% |
        """)
        
        governance_data = {
            'DLT': ['Hyperledger Fabric', 'Ethereum', 'IOTA'],
            'Controle': ['Alto', 'Baixo', 'M√©dio'],
            'Auditoria': ['Alta', 'Alta', 'M√©dia'],
            'Flexibilidade': ['Alta', 'Alta', 'M√©dia']
        }
        st.table(pd.DataFrame(governance_data))

def run_decision_tree():
    """Main function for the decision tree"""
    st.title("Framework de Sele√ß√£o de DLT")
    
    # Show evaluation matrices
    show_evaluation_matrices()
    
    # Rest of the existing decision tree code...
    if 'current_phase' not in st.session_state:
        st.session_state.current_phase = 1
    
    # Show questions and collect answers
    questions = get_phase_questions(st.session_state.current_phase)
    for question in questions:
        response = st.radio(question['text'], ['Sim', 'N√£o'])
        st.session_state.answers[question['id']] = response
    
    if st.button("Pr√≥xima Fase"):
        st.session_state.current_phase += 1
        st.experimental_rerun()

def get_phase_questions(phase):
    """Get questions for current phase"""
    # Existing question logic...
    return []  # Placeholder

# Rest of the existing code...
